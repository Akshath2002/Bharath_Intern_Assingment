import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Load the Wine Quality dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"
data = pd.read_csv(url, sep=';')

# Assuming 'X' contains the features and 'y' contains the target (wine quality)
X = data.drop('quality', axis=1)  # Features
y = data['quality']  # Target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a Linear Regression model
model = LinearRegression()

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the testing data
y_pred = model.predict(X_test)

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# You can now use the trained model to make predictions on new data
# Here, 'new_data' should be a DataFrame containing the same features as in the original dataset
# Replace the values in the list with actual feature values
new_data = pd.DataFrame({
    'fixed acidity': [7.0],
    'volatile acidity': [0.2],
    'citric acid': [0.4],
    'residual sugar': [6.0],
    'chlorides': [0.035],
    'free sulfur dioxide': [30],
    'total sulfur dioxide': [100],
    'density': [0.993],
    'pH': [3.0],
    'sulphates': [0.5],
    'alcohol': [10.5]
})
predicted_quality = model.predict(new_data)
print(f"Predicted Wine Quality: {predicted_quality[0]}")
